// 设计模式（可复用的面向对象软件的基础）：就是为已知且明晰的问题提供标准化解决方案的。可视为一种最佳实践，一种有价值的抽象，一种解决常见问题的模版
// 写出模块化、正确且可维护代码
// 1.模式为常见问题提供了行之有效的解决方案
// 2.模式旨在重用：它们具备通用型，适合各种问题
// 3.模式定义了词汇：模式是一种定义明确的结构，因而为解决方案提供了通用的基础，这使得大型团队在沟通时能够非常清晰表达各自的意图

/**
 * 创建型模式：该模式处理的是用于创建对象的各种机制。着眼于优化或更可控的对象创建机制。
 *  工厂方法
 *  抽象工厂
 *  建造者
 *  原型
 *  单例
 */

/**
 * 结构型模式：该模式考虑的是对象的组成以及对象之间的关系。意图将系统变化对整个对象关系所造成的影响降低到最小。
 *  适配器
 *  桥接
 *  组合
 *  装饰器
 *  外观
 *  享元
 *  代理
 */

/**
 * 行为型模式：该模式关注的是对象之间的依赖关系以及通信。
 *  解释器
 *  模版方法
 *  责任链
 *  命令
 *  迭代器
 *  中介者
 *  备忘录
 *  观察者
 *  状态
 *  策略
 *  访问者
 */



// 命名空间模式：命名空间能够减少全局变量的数量，有助于避免命名冲突。
// 命名空间的思路是为应用程序或库创建一个全局对象，将所有的其他对象和函数全部添加到该对象中，减少污染全局的几率。
// 单一全局对象
var CARFACTORY = CARFACTORY || {}; // 确保不存在的前提下才创建，确保不会覆盖别人的。
CARFACTORY.Car = function() {}; // 构造函数
CARFACTORY.BMW = function() {}; // 构造函数
CARFACTORY.engines = 1;
CARFACTORY.features = {
  seats: 6,
  airbags: 6
}
